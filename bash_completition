#brew code completition 
if [ -f $(brew --prefix)/etc/bash_completion ]; then
    . $(brew --prefix)/etc/bash_completion
fi

# GCloud SDK completition
source "/usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/completion.bash.inc"

###-begin-npm-completion-###
#
# npm command completion script
#
# Installation: npm completion >> ~/.bashrc  (or ~/.zshrc)
# Or, maybe: npm completion > /usr/local/etc/bash_completion.d/npm
#

if type complete &>/dev/null; then
  _npm_completion () {
    local words cword
    if type _get_comp_words_by_ref &>/dev/null; then
      _get_comp_words_by_ref -n = -n @ -w words -i cword
    else
      cword="$COMP_CWORD"
      words=("${COMP_WORDS[@]}")
    fi

    local si="$IFS"
    IFS=$'\n' COMPREPLY=($(COMP_CWORD="$cword" \
                           COMP_LINE="$COMP_LINE" \
                           COMP_POINT="$COMP_POINT" \
                           npm completion -- "${words[@]}" \
                           2>/dev/null)) || return $?
    IFS="$si"
  }
  complete -o default -F _npm_completion npm
elif type compdef &>/dev/null; then
  _npm_completion() {
    local si=$IFS
    compadd -- $(COMP_CWORD=$((CURRENT-1)) \
                 COMP_LINE=$BUFFER \
                 COMP_POINT=0 \
                 npm completion -- "${words[@]}" \
                 2>/dev/null)
    IFS=$si
  }
  compdef _npm_completion npm
elif type compctl &>/dev/null; then
  _npm_completion () {
    local cword line point words si
    read -Ac words
    read -cn cword
    let cword-=1
    read -l line
    read -ln point
    si="$IFS"
    IFS=$'\n' reply=($(COMP_CWORD="$cword" \
                       COMP_LINE="$line" \
                       COMP_POINT="$point" \
                       npm completion -- "${words[@]}" \
                       2>/dev/null)) || return $?
    IFS="$si"
  }
  compctl -K _npm_completion npm
fi
###-end-npm-completion-###

# Enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/profile.d/bash-completion.sh ]; then
    . /etc/profile.d/bash-completion.sh
fi

# Enable tab completion for `g` by marking it as an alias for `git`
if type _git &> /dev/null && [ -f /usr/local/etc/bash_completion.d/git-completion.bash ]; then
	complete -o default -o nospace -F _git g;
fi;

# Add tab completion for SSH hostnames based on ~/.ssh/config, ignoring wildcards
[ -e "$HOME/.ssh/config" ] && complete -o "default" -o "nospace" -W "$(grep "^Host" ~/.ssh/config | grep -v "[?*]" | cut -d " " -f2- | tr ' ' '\n')" scp sftp ssh;

# ctae.sh
complete -W "$(grep -v "#" $(ctae.sh -k) | grep -v "CONFIG" | grep "=i-" | sed -e 's/=.*//g'| tr '\n' ' ' | sort)" ctae.sh

# mya
# mya
if type complete &>/dev/null; then
	_mya_completitions()
	{
    local cur
    _get_comp_words_by_ref -n : cur

		COMPREPLY=()
		case "${#COMP_WORDS[@]}" in
    2) while IFS='' read -r line; do COMPREPLY+=("$line"); done < <(compgen -W "run list" "${COMP_WORDS[1]}")
      ;;
		3) # we are at mya list
      if [ "${COMP_WORDS[1]}" = "list" ]; then
        #echo "x has the value 'valid'"
        while IFS='' read -r line; do COMPREPLY+=("$line"); done < <(compgen -W "$(mya list -g)" "${COMP_WORDS[2]}")

      elif [ "${COMP_WORDS[1]}" = "run" ]; then
        # we are at mya run . Can suggest commands and groups too
        while IFS='' read -r line; do COMPREPLY+=("$line"); done < <(compgen -W "$(mya list -s)" "${COMP_WORDS[2]}")
        while IFS='' read -r line; do COMPREPLY+=("$line"); done < <(compgen -W "$(mya list -g)" "${COMP_WORDS[2]}")
      fi
		   ;;
		4)  # we are at mya run group - only run can have fourth param
      if [ "${COMP_WORDS[1]}" = "run" ]; then
        while IFS='' read -r line; do COMPREPLY+=("$line"); done < <(compgen -W "$(mya list "${COMP_WORDS[2]}" -s)" "${COMP_WORDS[3]}")
      fi
      ;;
		esac
    __ltrim_colon_completions "$cur"
	}

	complete -F _mya_completitions mya
fi
